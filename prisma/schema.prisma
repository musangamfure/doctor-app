generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  DOCTOR
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String         @unique
  phone         String
  slug          String         @default("slug")
  emailVerified DateTime?
  image         String?
  role          UserRole       @default(USER)
  plan          String?
  password      String
  accounts      Account[]
  sessions      Session[]
  doctorProfile DoctorProfile?

  serviceId   String?    @db.ObjectId
  service     Service?   @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  specialtyId String?    @db.ObjectId
  specialty   Specialty? @relation(fields: [specialtyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  symptomIds String[]

  isVerfied Boolean  @default(false)
  token     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  doctors  User[]
  slug     String @unique
  imageUrl String
  title    String

  doctorProfiles DoctorProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Specialty {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  doctors User[]
  slug    String @unique
  title   String

  doctorProfiles DoctorProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Symptom {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  slug      String   @unique
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DoctorProfile {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName                String
  lastName                 String
  middleName               String?
  dob                      DateTime?
  gender                   String
  profilePicture           String?
  bio                      String?
  medicalLicense           String?
  page                     String
  trackingNumber           String    @unique
  yearsOfExperience        Int?
  medicalLicenseExpiry     DateTime?
  email                    String?
  phone                    String?
  country                  String?
  city                     String?
  state                    String?
  hospitalName             String?
  hospitalAddress          String?
  hospitalEmailAddress     String?
  hospitalContactNumber    String?
  hospitalHoursOfOperation Int?
  hospitalWebsite          String?
  servicesOffered          String[]
  insuranceAccepted        String?
  languageSpoken           String[]
  educationHistory         String?
  research                 String?
  accomplishments          String?
  additionDocs             String[]
  meettingDuration         String?
  medicalSchool            String?
  graduationYear           String?
  primarySpecialization    String?
  otherSpecialization      String[]
  boardCertificates        String[]

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  operationMode String? @default("Telehealth")
  hourlWage     Int     @default(100)

  serviceId    String?       @db.ObjectId
  service      Service?      @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  specialtyId  String?       @db.ObjectId
  specialty    Specialty?    @relation(fields: [specialtyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  symptomIds   String[]      @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  availability Availability?
}

model Availability {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  doctorProfileId String        @unique @db.ObjectId
  doctorProfile   DoctorProfile @relation(fields: [doctorProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  monday          String[]
  tuesday         String[]
  wednesday       String[]
  thursday        String[]
  friday          String[]
  saturday        String[]
  sunday          String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Appointment {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  appointmentDate          DateTime?
  appointmentFormattedDate String?
  doctorId                 String?
  doctorProfileId          String?
  charge                   Int?
  appointmentTime          String?
  firtName                 String?
  lastName                 String?
  gender                   String?
  email                    String?
  phone                    String?
  dob                      DateTime?
  appointmentReason        String?
  medicalDocuments         String[]
  occupation               String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
}
